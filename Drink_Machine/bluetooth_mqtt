import time
import asyncio
from bleak import BleakClient, discover
import paho.mqtt.client as mqtt

# Bluetooth and MQTT settings
mac_address = "3D:05:EA:3A:81:18"
RESULT_UUID = "13012F01-F8C3-4F4A-A8F4-15CD926DA146"
MQTT_BROKER = "192.168.0.197"  # Change to the IP address of your MQTT broker if needed
MQTT_PORT = 1883
MQTT_TOPIC = "sensor/movement"

# Function to initialize the MQTT client
def setup_mqtt_client():
    client = mqtt.Client()
    client.connect(MQTT_BROKER, MQTT_PORT, keepalive=60)
    return client

# Main Bluetooth handling function
async def run(mqtt_client):
    print('Raspberry Pi 5 Central Service')
    print('Looking for Arduino Nano 33 BLE Sense Peripheral Device...')

    found = False
    devices = await discover()
    for d in devices:
        if 'Arduino Nano 33 BLE Sense' in d.name:
            print('Found Arduino Nano 33 BLE Sense Peripheral')
            found = True
            async with BleakClient(d.address) as client:
                print(f'Connected to {d.address}')

                while True:
                    try:
                        # Read data from Bluetooth
                        result = await client.read_gatt_char(RESULT_UUID)
                        res_convert = int.from_bytes(result, byteorder="little")

                        # Publish the data to the MQTT topic
                        mqtt_client.publish(MQTT_TOPIC, res_convert)
                        print(f"Published to MQTT: Movement detected - {res_convert}")

                    except Exception as e:
                        print(f"Error reading or publishing data: {e}")

    if not found:
        print('Could not find Arduino Nano 33 BLE Sense Peripheral')

# Main loop
if __name__ == "__main__":
    mqtt_client = setup_mqtt_client()
    print("Connected to MQTT broker.")

    while True:
        loop = asyncio.get_event_loop()
        try:
            loop.run_until_complete(run(mqtt_client))
        except KeyboardInterrupt:
            print('\nReceived Keyboard Interrupt')
            break
        except Exception as e:
            print(f"Error in Bluetooth loop: {e}")
        finally:
            print('\nRetrying...\n')

    mqtt_client.disconnect()
    print("Disconnected from MQTT broker.")
